import React, { useEffect } from 'react';
import { useAppDispatch } from '../../../Redux/hooks';
import Wrapper from '../../../ui/Wrapper';
import InputModal, { InputField } from '../../../ui/InputModal';
import Modal from '../../../ui/Modal';
import { UserGroupIcon } from '@heroicons/react/24/outline';
import ModalUser from '../../../ui/ModalUser';

interface User {
  id: number;
  lastName: string;
  firstName: string;
  middleName: string;
  email: string;
  barcode: string;
  userStatus: string;
  birthDate?: Date | null | string;
  bonusProgram: string;
  balance: number;
  isActivated: boolean;
}

interface UsersModalProps {
  isOpen: boolean;
  user: User | null;
  onSave: (editedUser: User) => void;
  onClose: () => void;
  editedUser: User | null | undefined;
  setEditedUser: React.Dispatch<React.SetStateAction<User | null | undefined>>;
}

const EmployeesModal: React.FC<UsersModalProps> = ({
  isOpen,
  user,
  onSave,
  onClose,
  editedUser,
  setEditedUser,
}) => {
  const dispatch = useAppDispatch();

  useEffect(() => {
    if (user) {
      setEditedUser({ ...user });
    }
  }, [user, setEditedUser]);

  const modalTitle = 'Редактирование анкеты клиента';

  const handleCancel = () => {
    setEditedUser(undefined);
    onClose();
  };

  const handleSave = () => {
    if (editedUser) {
      onSave(editedUser);
      onClose();
    }
  };

  if (!isOpen || !editedUser) {
    return null;
  }

  const inputFields: InputField[] = [
    {
      id: 'lastName',
      type: 'text',
      value: editedUser.lastName,
      placeholder: '',
      autoCapitalize: 'words',
      autoComplete: 'off',
      title: 'Фамилия',
      htmlFor: 'lastName',
      onChange: (value: string) =>
        setEditedUser({
          ...editedUser,
          lastName: value,
        }),
    },
    {
      id: 'firstName',
      type: 'text',
      value: editedUser.firstName,
      placeholder: '',
      autoCapitalize: 'words',
      autoComplete: 'off',
      title: 'Имя',
      htmlFor: 'firstName',
      onChange: (value: string) =>
        setEditedUser({
          ...editedUser,
          firstName: value,
        }),
    },
    {
      id: 'middleName',
      type: 'text',
      value: editedUser.middleName,
      placeholder: '',
      autoCapitalize: 'words',
      autoComplete: 'off',
      title: 'Отчество',
      htmlFor: 'middleName',
      onChange: (value: string) =>
        setEditedUser({
          ...editedUser,
          middleName: value,
        }),
    },
    {
      id: 'email',
      type: 'email',
      value: editedUser.email,
      placeholder: '',
      autoComplete: 'off',
      title: 'Email',
      htmlFor: 'email',
      onChange: (value: string) =>
        setEditedUser({
          ...editedUser,
          email: value,
        }),
    },
    {
      id: 'barcode',
      type: 'text',
      value: editedUser.barcode,
      placeholder: '',
      autoComplete: 'off',
      title: 'Штрих-код',
      htmlFor: 'barcode',
      onChange: (value: string) =>
        setEditedUser({
          ...editedUser,
          barcode: value,
        }),
    },
    {
      id: 'userStatus',
      type: 'text',
      value: editedUser.userStatus,
      placeholder: '',
      autoCapitalize: 'words',
      autoComplete: 'off',
      title: 'Статус пользователя',
      htmlFor: 'userStatus',
      onChange: (value: string) =>
        setEditedUser({
          ...editedUser,
          userStatus: value,
        }),
    },
    {
      id: 'isActivated',
      type: 'checkbox',
      checked: editedUser.isActivated,
      title: 'Активирован',
      htmlFor: 'isActivated',
      onChange: (value: boolean) =>
        setEditedUser({
          ...editedUser,
          isActivated: value,
        }),
    },
    {
      id: 'birthdate',
      type: 'date',
      value: editedUser.birthDate,
      placeholder: '',
      autoComplete: 'off',
      title: 'Дата рождения',
      htmlFor: 'birthdate',
      onChange: (value: string | null | Date) =>
        setEditedUser({
          ...editedUser,
          birthDate: new Date(value),
        }),
    },
    // {
    //   id: 'bonusProgram',
    //   type: 'text',
    //   value: editedUser.bonusProgram,
    //   placeholder: '',
    //   autoCapitalize: 'words',
    //   autoComplete: 'off',
    //   title: 'Бонусная программа',
    //   htmlFor: 'bonusProgram',
    //   onChange: (value: string) =>
    //     setEditedUser({
    //       ...editedUser,
    //       bonusProgram: value,
    //     }),
    // },
    {
      id: 'balance',
      type: 'number',
      value: editedUser.balance.toString(),
      placeholder: '',
      autoComplete: 'off',
      title: 'Баланс',
      htmlFor: 'balance',
      onChange: (value: string) =>
        setEditedUser({
          ...editedUser,
          balance: parseFloat(value),
        }),
    },
  ];

  return (
    <>
      <Wrapper>
        <ModalUser
          modalTitle={modalTitle}
          onCancellick={handleCancel}
          onSaveClick={handleSave}
        >
          <InputModal
            containerClassName={
              'py-8 grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2'
            }
            inputFields={inputFields}
          />
        </ModalUser>
      </Wrapper>
      {/* <div
        className="py-20 bg-slate-700 bg-opacity-70 fixed top-0 right-0 bottom-0 left-0 flex items-center justify-center"
        id="modal"
      >
        <div role="alert" className="container mx-auto max-w-4xl">
          <div className="relative py-8 px-5 md:px-10 bg-white shadow-md rounded-3xl border border-slate-400">
            <div className="flex justify-center items-center">
              <div className="w-8 text-gray-600">
                <UserGroupIcon className="w-6 h-6 text-slate-400" />
              </div>
              <h1 className="text-lime-600 text-lg font-bold tracking-normal leading-tight">
                Сотрудники
              </h1>
            </div> */}
      {/* <form>
              <div className="grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2">
                <div>
                  <label
                    className="text-white dark:text-gray-200"
                    htmlFor="username"
                  >
                    Username
                  </label>
                  <input
                    id="username"
                    type="text"
                    className="block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring"
                  />
                </div>

                <div>
                  <label
                    className="text-white dark:text-gray-200"
                    htmlFor="emailAddress"
                  >
                    Email Address
                  </label>
                  <input
                    id="emailAddress"
                    type="email"
                    className="block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring"
                  />
                </div>

                <div>
                  <label
                    className="text-white dark:text-gray-200"
                    htmlFor="password"
                  >
                    Password
                  </label>
                  <input
                    id="password"
                    type="password"
                    className="block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring"
                  />
                </div>

                <div>
                  <label
                    className="text-white dark:text-gray-200"
                    htmlFor="passwordConfirmation"
                  >
                    Password Confirmation
                  </label>
                  <input
                    id="passwordConfirmation"
                    type="password"
                    className="block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring"
                  />
                </div>

                <div>
                  <label
                    className="text-white dark:text-gray-200"
                    htmlFor="color"
                  >
                    Color
                  </label>
                  <input
                    id="color"
                    type="color"
                    className="block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring"
                  />
                </div>

                <div>
                  <label
                    className="text-white dark:text-gray-200"
                    htmlFor="select"
                  >
                    Select
                  </label>
                  <select
                    id="select"
                    className="block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring"
                  >
                    <option>Surabaya</option>
                    <option>Jakarta</option>
                    <option>Tangerang</option>
                    <option>Bandung</option>
                  </select>
                </div>

                <div>
                  <label
                    className="text-white dark:text-gray-200"
                    htmlFor="range"
                  >
                    Range
                  </label>
                  <input
                    id="range"
                    type="range"
                    className="block w-full py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring"
                  />
                </div>

                <div>
                  <label
                    className="text-white dark:text-gray-200"
                    htmlFor="date"
                  >
                    Date
                  </label>
                  <input
                    id="date"
                    type="date"
                    className="block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring"
                  />
                </div>

                <div>
                  <label
                    className="text-white dark:text-gray-200"
                    htmlFor="textarea"
                  >
                    Text Area
                  </label>
                  <textarea
                    id="textarea"
                    //type="textarea"
                    className="block w-full px-4 py-2 mt-2 text-gray-700 bg-white border border-gray-300 rounded-md dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 focus:border-blue-500 dark:focus:border-blue-500 focus:outline-none focus:ring"
                  ></textarea>
                </div>

                <div>
                  <label className="block text-sm font-medium text-white">
                    Image
                  </label>
                  <div className="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-md">
                    <div className="space-y-1 text-center">
                      <svg
                        className="mx-auto h-12 w-12 text-white"
                        stroke="currentColor"
                        fill="none"
                        viewBox="0 0 48 48"
                        aria-hidden="true"
                      >
                        <path
                          d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                        />
                      </svg>
                      <div className="flex text-sm text-gray-600">
                        <label
                          htmlFor="file-upload"
                          className="relative cursor-pointer bg-white rounded-md font-medium text-indigo-600 hover:text-indigo-500 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-indigo-500"
                        >
                          <span>Upload a file</span>
                          <input
                            id="file-upload"
                            name="file-upload"
                            type="file"
                            className="sr-only"
                          />
                        </label>
                        <p className="pl-1 text-white">or drag and drop</p>
                      </div>
                      <p className="text-xs text-white">
                        PNG, JPG, GIF up to 10MB
                      </p>
                    </div>
                  </div>
                </div>
              </div>

              <div className="flex justify-end mt-6">
                <button className="px-6 py-2 leading-5 text-white transition-colors duration-200 transform bg-pink-500 rounded-md hover:bg-pink-700 focus:outline-none focus:bg-gray-600">
                  Save
                </button>
              </div>
            </form> */}

      {/* <form>
              <div className="grid grid-cols-1 gap-6 mt-4 sm:grid-cols-2">
                <div className="relative">
                  <input
                    id="lastName"
                    type="text"
                    value={editedUser.lastName}
                    placeholder=""
                    autoComplete="off"
                    className="block py-2.5 px-0 w-full text-sm text-slate-500 bg-transparent border-0 border-b-2 border-slate-300 appearance-none focus:outline-none focus:ring-0 focus:border-green-400 peer focus:text-green-500"
                  />
                  <label
                    htmlFor="lastName"
                    className="absolute left-0 -top-3.5 text-slate-400 text-sm peer-placeholder-shown:text-base peer-placeholder-shown:text-lime-440 peer-placeholder-shown:top-2 transition-all peer-focus:-top-3.5 peer-focus:text-lime-3s00 peer-focus:text-sm"
                  >
                    Фамилия
                  </label>
                </div>
                <div className="relative">
                  <input
                    id="lastName"
                    type="text"
                    value={editedUser.lastName}
                    placeholder=""
                    autoComplete="off"
                    className="block py-2.5 px-0 w-full text-sm text-slate-500 bg-transparent border-0 border-b-2 border-slate-300 appearance-none focus:outline-none focus:ring-0 focus:border-green-400 peer focus:text-green-500"
                  />
                  <label
                    htmlFor="lastName"
                    className="absolute left-0 -top-3.5 text-slate-400 text-sm peer-placeholder-shown:text-base peer-placeholder-shown:text-lime-440 peer-placeholder-shown:top-2 transition-all peer-focus:-top-3.5 peer-focus:text-lime-3s00 peer-focus:text-sm"
                  >
                    Фамилия
                  </label>
                </div>
              </div>
            </form> */}
      {/* </div>
        </div>
      </div> */}
    </>
  );
};

export default EmployeesModal;


из компонента Management.tsx 

        //   //! так можно сделать перенос, но типизация ломается жёстко
        //   // setModalError(
        //   //   <>
        //   //     Не удалось обновить данные.
        //   //     <br />
        //   //     Пользователь с такой почтой уже существует
        //   //   </> as string
        //   // );

        //   // setTimeout(() => {
        //   //   setModalError(null);
        //   // }, 3000);
        // }