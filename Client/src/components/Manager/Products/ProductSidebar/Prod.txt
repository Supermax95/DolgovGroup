 ///////////////////////////////////////////////////////////////////////////////////////////////////

  //! я уже хуй знает, что это, but work
  const [isMenuOpen, setMenuOpen] = useState<boolean>(false); //* меню для редактирования категории
  const [isMenuOpenSub, setMenuOpenSub] = useState<boolean>(false); //* меню для редактирования подкатегории

  //* рендерит  выпадающий список для категорий
  const [selectedCategoryData, setSelectedCategoryData] =
    useState<ICategory | null>(null);

  const [selectedSubcategoryData, setSelectedSubcategoryData] = useState<{
    id: number | null;
    subcategory: ISubcategory | null;
  }>({ id: null, subcategory: null });

  const [subcategoryStates, setSubcategoryStates] = useState<{
    [key: number]: boolean;
  }>({});

  const menuRef = useRef<HTMLDivElement | null>(null);

  //* дополнительное меню для каждой КАТЕГОРИИ
  //!  удаётся закрыть по шестерёнке при повторном нажатии, но не по любой области
  const toggleMenu = (id: number): void => {
    //  console.log(id);
    //! почему-то первый selectedCategoryData при нажатии null впервые всплывающего окна, но выбирает правильно
    console.log('selectedCategoryData', selectedCategoryData);

    if (selectedCategoryData === id) {
      setSelectedCategoryData(null);
      setMenuOpen(false);
    } else {
      setSelectedCategoryData(id);
      setMenuOpen(true);
    }
  };

  //* дополнительное меню для каждой ПОДКАТЕГОРИИ
  //!  удаётся закрыть по шестерёнке при повторном нажатии, но не по любой области

  const toggleMenuSub = (id: number): void => {
    const subcategory = allSubcategories.find((sub) => sub.id === id);
    if (subcategory) {
      setSelectedSubcategoryData((prev) => ({
        id: prev.id === id ? null : id,
        subcategory: prev.id === id ? null : subcategory,
      }));

      if (isMenuOpen) {
        setMenuOpen(false); // Закрываем всплывающее окно главной категории
        setSelectedCategoryData(null); // Сбрасываем выбранную главную категорию
      }

      setMenuOpenSub((prev) => !prev);
    }
  };

  useEffect(() => {
    // Устанавливаем значение только если состояние действительно изменилось
    if (
      selectedSubcategoryData.id !== null ||
      selectedSubcategoryData.subcategory !== null
    ) {
      setMenuOpenSub(true);
    }
  }, [selectedSubcategoryData]);

  const menuClass = isMenuOpen ? 'block' : 'hidden';
  const menuClassSub = isMenuOpenSub ? 'block' : 'hidden';

  const handleClickOutside = (e: MouseEvent): void => {
    if (
      menuRef.current &&
      !menuRef.current.contains(e.target as Node) &&
      selectedCategoryData !== null
    ) {
      // setMenuOpen(false);
      // setSelectedCategoryData(null);
      // setEditingCategory(null);
      setMenuOpen(false);
      setSelectedCategoryData(null);
      setSelectedSubcategoryData([]);
      setEditingCategory(null);
      setEditingSubcategory(null);
    }
  };

  useEffect(() => {
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  ///////////////////
  const { id: selectedSubcategoryId, subcategory: selectedSubcategory } =
    selectedSubcategoryData;
  ////////////////////

  //////////////////////////////////////////////////////////////////////////////////////////////




  //////// здесь только подкатегория 

    // //* дополнительное меню для каждой ПОДКАТЕГОРИИ
  // //!  удаётся закрыть по шестерёнке при повторном нажатии, но не по любой области
  // const toggleMenuSub = (id: number): void => {
  //   const subcategory = allSubcategories.find((sub) => sub.id === id);
  //   if (subcategory) {
  //     setSelectedSubcategoryData((prev) => ({
  //       id: prev.id === id ? null : id,
  //       subcategory: prev.id === id ? null : subcategory,
  //     }));

  //     if (isMenuOpen) {
  //       setMenuOpen(false); // Закрываем всплывающее окно главной категории
  //       setSelectedCategoryData(null); // Сбрасываем выбранную главную категорию
  //     }

  //     setMenuOpenSub((prev) => !prev);
  //   }
  // };

  // useEffect(() => {
  //   // Устанавливаем значение только если состояние действительно изменилось
  //   if (
  //     selectedSubcategoryData.id !== null ||
  //     selectedSubcategoryData.subcategory !== null
  //   ) {
  //     setMenuOpenSub(true);
  //   }
  // }, [selectedSubcategoryData]);

    // const menuClassSub = isMenuOpenSub ? 'block' : 'hidden';

  // const { id: selectedSubcategoryId, subcategory: selectedSubcategory } =
  // selectedSubcategoryData;



  const handleClickOutside = (e: MouseEvent): void => {
    if (
      menuRef.current &&
      !menuRef.current.contains(e.target as Node) &&
      selectedCategoryData !== null
    ) {
      // setMenuOpen(false);
      // setSelectedCategoryData(null);
      // setEditingCategory(null);
      setMenuOpen(false);
      setSelectedCategoryData(null);
      setSelectedSubcategoryData([]);
      setEditingCategory(null);
      setEditingSubcategory(null);
    }
  };