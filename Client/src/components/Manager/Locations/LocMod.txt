import React, { useEffect } from 'react';
import { useAppDispatch } from '../../../Redux/hooks';
import addLocation from '../../../Redux/thunks/Locations/addLocation.api';
import deleteLocation from '../../../Redux/thunks/Locations/deleteLocation.api';
import Wrapper from '../../../ui/Wrapper';
import Field from '../../../ui/Field';
import InputModal from '../../../ui/InputModal';

interface Location {
  id: number;
  city: string;
  address: string;
  latitude: string;
  longitude: string;
  hours: string;
}

interface LocationsModalProps {
  isOpen: boolean;
  location: Location | null;
  onSave: (editedLocation: Location) => void;
  onClose: () => void;
  isAddingMode: boolean;
  editedLocation: Location | null | undefined;
  setEditedLocation: React.Dispatch<
    React.SetStateAction<Location | null | undefined>
  >;
}

const LocationsModal: React.FC<LocationsModalProps> = ({
  isOpen,
  location,
  onSave,
  onClose,
  isAddingMode,
  editedLocation,
  setEditedLocation,
}) => {
  const dispatch = useAppDispatch();
  location || {
    id: 0,
    city: '',
    address: '',
    latitude: '',
    longitude: '',
    hours: '',
  };

  useEffect(() => {
    if (location) {
      setEditedLocation({ ...location });
    }
  }, [location, isAddingMode, setEditedLocation]);

  const modalTitle = isAddingMode
    ? 'Новая точка продажи'
    : 'Редактировать магазин';

  const handleCancel = () => {
    setEditedLocation(undefined);
    onClose();
  };

  const handleSave = () => {
    if (areFieldsValid() && editedLocation) {
      onSave(editedLocation);
      onClose();
    } else {
      alert('Заполните все поля перед сохранением.');
    }
  };

  const areFieldsValid = () => {
    if (editedLocation) {
      const { city, address, latitude, longitude, hours } = editedLocation;
      return city && address && latitude && longitude && hours;
    }
    return false;
  };
  const handleAdd = async () => {
    if (areFieldsValid() && editedLocation) {
      try {
        await dispatch(
          addLocation({
            newLocation: editedLocation,
          })
        );
        onClose();
      } catch (error) {
        console.error('Произошла ошибка при добавлении:', error);
      }
    } else {
      alert('Заполните все поля перед добавлением.');
    }
  };

  const handleDelete = () => {
    if (editedLocation && editedLocation.id) {
      const locationId = editedLocation.id;
      dispatch(deleteLocation(locationId));
      onClose();
    }
  };

  if (!isOpen || !editedLocation) {
    return null;
  }

  const inputFields = [
    {
      id: 'city',
      type: 'text',
      value: editedLocation.city,
      placeholder: '',
      autoCapitalize: 'word',
      autoComplete: 'off',
      title: 'Город',
      htmlFor: 'city',
      onChange: (value) =>
        setEditedLocation({
          ...editedLocation,
          city: value,
        }),
    },
    {
      id: 'address',
      type: 'text',
      value: editedLocation.address,
      placeholder: '',
      autoCapitalize: 'word',
      autoComplete: 'off',
      title: 'Адрес',
      htmlFor: 'address',
      onChange: (value) =>
        setEditedLocation({
          ...editedLocation,
          address: value,
        }),
    },
    // Добавьте другие инпуты аналогичным образом
  ];

  return (
    <Wrapper>
      <div
        className="py-20 bg-gray-700 bg-opacity-70 fixed top-0 right-0 bottom-0 left-0 flex items-center justify-center"
        id="modal"
      >
        <div
          role="alert"
          className="container mx-auto w-11/12 md:w-2/3 max-w-lg h-full"
        >
          <div className="relative py-8 px-5 md:px-10 bg-white shadow-md rounded-3xl border border-slate-400">
            {/* <div className="container mx-auto w-full md:w-2/3 lg:w-1/2 xl:w-1/3">
          <div className="relative py-8 px-5 md:px-10 bg-white shadow-md rounded-3xl border border-gray-400"> */}
            <div className="flex justify-center items-center">
              <div className="w-8 text-gray-600">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  strokeWidth="1.5"
                  stroke="#f97316"
                  className="w-6 h-6"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M13.5 21v-7.5a.75.75 0 01.75-.75h3a.75.75 0 01.75.75V21m-4.5 0H2.36m11.14 0H18m0 0h3.64m-1.39 0V9.349m-16.5 11.65V9.35m0 0a3.001 3.001 0 003.75-.615A2.993 2.993 0 009.75 9.75c.896 0 1.7-.393 2.25-1.016a2.993 2.993 0 002.25 1.016c.896 0 1.7-.393 2.25-1.016a3.001 3.001 0 003.75.614m-16.5 0a3.004 3.004 0 01-.621-4.72L4.318 3.44A1.5 1.5 0 015.378 3h13.243a1.5 1.5 0 011.06.44l1.19 1.189a3 3 0 01-.621 4.72m-13.5 8.65h3.75a.75.75 0 00.75-.75V13.5a.75.75 0 00-.75-.75H6.75a.75.75 0 00-.75.75v3.75c0 .415.336.75.75.75z"
                  />
                </svg>
              </div>
              <h1 className="text-lime-600 text-md font-bold tracking-normal leading-tight">
                {modalTitle}
              </h1>
            </div>

            {/* <div className="py-8 text-base leading-6 space-y-4 text-gray-700 sm:text-lg sm:leading-7"> */}
            {/* <InputModal
                title="Город"
                placeholder=""
                type="text"
                autoCapitalize="word"
                autoComplete="off"
                value={editedLocation.city}
                onChange={(e) =>
                  setEditedLocation({
                    ...editedLocation,
                    city: e.target.value,
                  })
                }
                id="city"
                htmlFor="city"
              /> */}
            <InputModal inputFields={inputFields} />
            {/* 
            <label
              className="text-slate-600 text-sm font-bold leading-tight tracking-normal"
              htmlFor="city"
            ></label>
            <input
              className="block py-2.5 px-0 w-full text-sm text-green-600 bg-transparent border-0 border-b-2 border-slate-300 appearance-none focus:outline-none focus:ring-0 focus:border-green-400 peer focus:text-green-500"
              placeholder="Город"
              autoComplete="off"
              value={editedLocation.city}
              onChange={(e) =>
                setEditedLocation({
                  ...editedLocation,
                  city: e.target.value,
                })
              }
              id="city"
            /> */}
            <label
              className="text-gray-800 text-sm font-bold leading-tight tracking-normal"
              htmlFor="address"
            >
              Адрес
            </label>
            <div className="relative mb-5 mt-2">
              <input
                className="mb-5 mt-2 text-gray-600 focus:outline-none focus:border focus:border-indigo-700 font-normal w-full h-10 flex items-center pl-3 text-sm border-gray-300 rounded border"
                placeholder="Адрес"
                value={editedLocation.address}
                onChange={(e) =>
                  setEditedLocation({
                    ...editedLocation,
                    address: e.target.value,
                  })
                }
                id="address"
              />
            </div>
            <label
              className="text-gray-800 text-sm font-bold leading-tight tracking-normal"
              htmlFor="latitude"
            >
              Широта
            </label>
            <div className="relative mb-5 mt-2">
              <input
                type="text"
                className="mb-5 mt-2 text-gray-600 focus:outline-none focus:border focus:border-indigo-700 font-normal w-full h-10 flex items-center pl-3 text-sm border-gray-300 rounded border"
                placeholder="Широта"
                value={editedLocation.latitude.toString().replace(',', '.')}
                onChange={(e) => {
                  const value = e.target.value;
                  const newValue = value.replace(/,/g, '.');
                  if (
                    !newValue.includes(' ') &&
                    !isNaN(+newValue) &&
                    +newValue >= 0 &&
                    +newValue <= 90
                  ) {
                    setEditedLocation({
                      ...editedLocation,
                      latitude: newValue,
                    });
                  }
                }}
                id="latitude"
              />
            </div>

            <label
              className="text-gray-800 text-sm font-bold leading-tight tracking-normal"
              htmlFor="longitude"
            >
              Долгота
            </label>
            <div className="relative mb-5 mt-2">
              <input
                type="text"
                className="mb-5 mt-2 text-gray-600 focus:outline-none focus:border focus:border-indigo-700 font-normal w-full h-10 flex items-center pl-3 text-sm border-gray-300 rounded border"
                placeholder="Долгота"
                value={editedLocation.longitude.toString().replace(',', '.')}
                onChange={(e) => {
                  const value = e.target.value;
                  const newValue = value.replace(/,/g, '.');
                  if (
                    !newValue.includes(' ') &&
                    !isNaN(+newValue) &&
                    +newValue >= 0 &&
                    +newValue <= 180
                  ) {
                    setEditedLocation({
                      ...editedLocation,
                      longitude: newValue,
                    });
                  }
                }}
                id="longitude"
              />
            </div>

            <label
              className="text-gray-800 text-sm font-bold leading-tight tracking-normal"
              htmlFor="hours"
            >
              Часы работы
            </label>
            <div className="relative mb-5 mt-2">
              <input
                id="hours"
                className="text-gray-600 focus:outline-none focus:border focus:border-indigo-700 font-normal w-full h-10 flex items-center pl-3 text-sm border-gray-300 rounded border"
                placeholder="Часы работы"
                value={editedLocation.hours}
                onChange={(e) =>
                  setEditedLocation({
                    ...editedLocation,
                    hours: e.target.value,
                  })
                }
              />
            </div>
            {/* </div> */}

            <div className="flex items-center justify-start w-full">
              {isAddingMode ? (
                <button
                  className="focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition duration-150 ease-in-out hover:bg-green-600 bg-green-500 rounded text-white px-8 py-2 text-sm"
                  onClick={handleAdd}
                >
                  Добавить
                </button>
              ) : (
                <button
                  className="focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 transition duration-150 ease-in-out hover:bg-green-600 bg-green-500 rounded text-white px-8 py-2 text-sm"
                  onClick={handleSave}
                >
                  Сохранить
                </button>
              )}
              {location && !isAddingMode && (
                <button
                  className="focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 ml-3 bg-red-100 transition duration-150 text-red-600 ease-in-out hover:border-red-400 hover:bg-red-300 border rounded px-8 py-2 text-sm"
                  onClick={handleDelete}
                >
                  Удалить
                </button>
              )}
              <button
                className="focus:outline-none focus:ring-2 focus:ring-offset-2  focus:ring-gray-400 ml-3 bg-gray-100 transition duration-150 text-gray-600 ease-in-out hover:border-gray-400 hover:bg-gray-300 border rounded px-8 py-2 text-sm"
                onClick={handleCancel}
              >
                Отменить
              </button>
            </div>
            <button
              className="cursor-pointer absolute top-0 right-0 mt-4 mr-5 text-gray-400 hover:text-gray-600 transition duration-150 ease-in-out rounded focus:ring-2 focus:outline-none focus:ring-gray-600"
              onClick={handleCancel}
              aria-label="close modal"
              role="button"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="icon icon-tabler icon-tabler-x"
                width="20"
                height="20"
                viewBox="0 0 24 24"
                strokeWidth="2.5"
                stroke="currentColor"
                fill="none"
                strokeLinecap="round"
                strokeLinejoin="round"
              >
                <path stroke="none" d="M0 0h24v24H0z" />
                <line x1="18" y1="6" x2="6" y2="18" />
                <line x1="6" y1="6" x2="18" y2="18" />
              </svg>
            </button>
          </div>
        </div>
      </div>
    </Wrapper>
  );
};

export default LocationsModal;


Эти хендлеры превратились в сабмит форму

  // const handleAdd = () => {
  //   if (editedLocation) {
  //     onSaveAdd(editedLocation);
  //     onCloseAddModal();
  //   }
  // };

  // const handleSave = () => {
  //   if (editedLocation) {
  //     onSaveEdit(editedLocation);
  //     onCloseEditModal();
  //   } else {
  //     alert('Заполните все поля перед сохранением.');
  //   }
  // };


// логика на обязательные поля инпутов
  const areFieldsValid = () => {
    if (editedLocation) {
      const { city, address, latitude, longitude, hours } = editedLocation;
      return city && address && latitude && longitude && hours;
    }
    return false;
  };